@*
// --------------------------------------------------------------------------------------------------------------------
   // <copyright file="Index.razor.cs" company="Kyle Halek">
   // Copyright 2023 Kyle Halek
   //
   // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
   // The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   // </copyright>
   // 
   // <summary>
   //   The index.
   // </summary>
   // --------------------------------------------------------------------------------------------------------------------
*@

@page "/"

<PageTitle>BlazorPrimeNumber</PageTitle>

<CardDeck>
    <Card Shadow="Shadow.Small">
        <CardHeader TextAlignment="TextAlignment.Center">
            Problem
        </CardHeader>
        <CardBody>
            <CardTitle>
                <Code>
<pre>
Prime Number 
A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.  Your task is to create a method that tests a Long number input to see if it is a prime number. Below is a list of sample prime numbers you can use for testing
2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101

Your method should return true if it is prime and false if it is not
The goal of your method is to
1.       Return the correct 
2.       Be as efficient as possible so that your method will perform 
3.       Be robust so it does not 


The method signature you are required to use is
boolean isPrime(Long number)
</pre>
                </Code>
            </CardTitle>

            <Slider Value="@numberOfPrimes" ValueChanged="SetPrimeNumbers" TValue="int" Min="1" Max="300">
                <FieldHelp>
                    Number of primes to generate <Badge Color="Color.Primary" Pill>
                        @numberOfPrimes
                    </Badge>
                </FieldHelp>
            </Slider>
        </CardBody>
    </Card>

    <Card Margin="Margin.Is2.FromTop" Shadow="Shadow.Small">
        <CardHeader TextAlignment="TextAlignment.Center">
            Output
        </CardHeader>
        <CardBody>
            @foreach (var number in primeNumbers)
            {
                <Badge Color="@(isPrime(number) ? Color.Success : Color.Danger)" Style="font-size: 1rem;" Margin="Margin.Is1">
                    @number
                    <Icon Margin="Margin.Is2.FromStart" Float="Float.End"
                          Name="@(isPrime(number) ? IconName.CheckCircle : IconName.TimesCircle)" />
                </Badge>
            }

            <Divider></Divider>
            <CardTitle TextAlignment="TextAlignment.Center">
                Manual Tests
            </CardTitle>
            @foreach (var number in testNumbers)
            {
                <Badge Color="@(isPrime(number) ? Color.Success : Color.Danger)"
                       Margin="Margin.Is1"
                       Style="font-size: 1rem;">
                    @number
                    <Icon Margin="Margin.Is2.FromStart" Float="Float.End"
                          Name="@(isPrime(number) ? IconName.CheckCircle : IconName.TimesCircle)" />
                </Badge>
            }

        </CardBody>
    </Card>
</CardDeck>